<?php

/**
 * @file
 * Functions to support theming in the Tailwind CSS theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess().
 */
function madrone_preprocess(&$variables, $hook) {
  // Check if node is set
  // and that it is an instance of Content Entity Interface.
  /*  if (isset($variables['node']) && $variables['node']
  instanceof ContentEntityInterface) {
  $nodeGroups = GroupContent::loadByEntity($variables['node']);
  if (!empty($nodeGroups)) {
  foreach ($nodeGroups as $group) {
  $variables['in_group'] = TRUE;
  $variables['groups'][] = $group->getGroup()->label();
  }
  }
  else {
  $variables['in_group'] = FALSE;
  }
  }
   */
  try {
    $variables['is_front'] = Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $exception) {
    $variables['is_front'] = FALSE;
  }
  $variables['hide_title_front'] = theme_get_setting('madrone_front_title') ? TRUE : FALSE;
  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_html(&$variables) {
  $theme_color_light = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'theme-color',
      'media' => '(prefers-color-scheme: light)',
      'content' => '#fff',
    ],
  ];
  $theme_color_dark = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'theme-color',
      'media' => '(prefers-color-scheme: dark)',
      'content' => '#000',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [
    $theme_color_light,
    'madroneThemeColorLight',
  ];
  $variables['page']['#attached']['html_head'][] = [
    $theme_color_dark,
    'madroneThemeColorDark',
  ];

  $variables['head_title'][] = 'Oregon State University';
  // Check if the footer doesn't have any blocks and creates an empty element
  // to force the footer to always render.
  if (empty($variables['page']['footer'])) {
    $variables['page']['footer'] = [
      'force-empty-display' => [
        '#markup' => '',
      ],
      '#theme_wrappers' => ['region'],
      '#region' => 'footer',
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_block(&$variables) {
  // Adding a base_path variable to block template.
  $variables['base_path'] = base_path();
  // Adding region specific templates.
  if (!empty($variables['elements']['#id'])) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {
      $region = $block->getRegion();
      if ($variables['base_plugin_id'] == 'search_form_block') {
        if ($region == 'header') {
          $variables['content']['keys']['#madrone_is_header_search_submit'] = TRUE;
          $variables['content']['actions']['submit']['#madrone_is_header_search_submit'] = TRUE;
        }
        elseif ($region == 'mobile_header') {
          $variables['content']['keys']['#madrone_is_mobile_search_submit'] = TRUE;
          $variables['content']['actions']['submit']['#madrone_is_mobile_search_submit'] = TRUE;
        }
      }
      if ($variables['base_plugin_id'] == 'system_branding_block') {
        $themeCrestPath = '/' . Drupal::theme()
          ->getActiveTheme()
          ->getPath() . '/assets/osu-logo-crest-only.svg';
        $variables['crest_logo'] = $themeCrestPath;
      }
      $variables['content']['#attributes']['region'] = $region;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_input(&$variables) {
  $input_type = $variables['element']['#type'];
  switch ($input_type) {
    case 'color':
      $variables['attributes']['class'][] = 'form-control';
      $variables['attributes']['class'][] = 'form-control-color';
      break;

    case 'checkbox':
    case 'radio':
      $variables['attributes']['class'][] = 'form-check-input';
      break;

    case 'range':
      $variables['attributes']['class'][] = 'form-range';
      break;

    case 'search':
      $variables['attributes']['class'][] = 'form-control';
      break;

    // Intentionally leaving blank to not include classes.
    case 'submit':
      break;

    default:
      $variables['attributes']['class'][] = 'form-control';
      $variables['attributes']['class'][] = 'my-3';
      break;

  }
  $variables['type'] = $input_type;
}

/**
 * Implements hook_form_alter().
 */
function madrone_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['actions']['submit']) && (count($form['actions'])) <= 2) {
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
  }
  switch ($form_id) {
    case 'search_block_form':
      $form['keys']['#attributes']['placeholder'] = t('Search');
      $form['keys']['#attributes']['size'] = 25;
      break;

    case 'search_form':
      $form['basic']['keys']['#attributes']['placeholder'] = t('Search');
      $form['basic']['submit']['#attributes']['class'][] = 'button--primary';
      $form['advanced']['submit']['#attributes']['class'][] = 'button--primary';
      break;

    case 'entity_view_display_layout_builder_form':
    case 'node_page_layout_builder_form':
    case 'layout_builder_discard_changes':
    case 'layout_builder_revert_overrides':
      $form['#attributes']['class'][] = 'container';
      break;

    case 'views_exposed_form':
      $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
      break;

    // For new sections setup some defaults for spacing.
    case 'layout_builder_configure_section':
      $is_new_section = $form['actions']['submit']['#value']->getUntranslatedString() === 'Add section';
      if ($is_new_section) {
        $form['layout_settings']['ui']['tab_content']['layout']['container_type']['#default_value'] = 'container-fluid';
        $form['layout_settings']['ui']['tab_content']['layout']['remove_gutters']['#default_value'] = 0;
        $form['layout_settings']['ui']['tab_content']['appearance']['spacing']['padding']['#default_value'] = 2;
        $form['layout_settings']['ui']['tab_content']['appearance']['spacing']['margin_top']['#default_value'] = 1;
        $form['layout_settings']['ui']['tab_content']['appearance']['spacing']['margin_bottom']['#default_value'] = 1;
      }
      break;

    // For New Blocks.
    case 'layout_builder_add_block':
      $form['ui']['tab_content']['appearance']['spacing']['padding_top']['#default_value'] = 1;
      $form['ui']['tab_content']['appearance']['spacing']['padding_bottom']['#default_value'] = 1;
      $form['ui']['tab_content']['appearance']['spacing']['margin_bottom']['#default_value'] = 1;
      break;

  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['#id'])) {
    /** @var \Drupal\block\BlockInterface $block */
    $block = Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {
      // Get the region the block is in.
      $region = $block->getRegion();
      $suggestions[] = 'block__' . $region;
      $suggestions[] = 'block__' . $region . '__' . 'plugin_id' . '__' . $variables['elements']['#plugin_id'];
      $suggestions[] = 'block__' . $region . '__' . 'id' . '__' . $variables['elements']['#id'];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#madrone_is_header_search_submit'] ?? FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__header_search';
  }
  if ($variables['element']['#madrone_is_mobile_search_submit'] ?? FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__mobile_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $form_id = $variables['element']['#form_id'];
  $suggestions[] = 'form__' . $form_id;
  if (isset($variables['element']['#attributes']['region'])) {
    $region = $variables['element']['#attributes']['region'];
    $suggestions[] = 'form__' . $region . '__' . $form_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $region = str_replace('-', '_', $variables['attributes']['region']);
    $suggestions[] = 'menu__' . $region;
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function madrone_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  if (!empty($variables['element']['#active'])) {
    $variables['link']['#options']['attributes']['class'][] = 'active';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_image_style_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['style_name'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function madrone_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['style_name'];
}
